// Code generated by MockGen. DO NOT EDIT.
// Source: service/api.go

// Package mock_service is a generated GoMock package.
package mock

import (
	context "context"
	dto "github.com/eolinker/apinto-dashboard/modules/api/api-dto"
	api_entry "github.com/eolinker/apinto-dashboard/modules/api/api-entry"
	apimodel "github.com/eolinker/apinto-dashboard/modules/api/model"
	"github.com/eolinker/apinto-dashboard/modules/base/frontend-model"
	"github.com/eolinker/apinto-dashboard/modules/group/group-model"
	model "github.com/eolinker/apinto-dashboard/modules/strategy/strategy-model"
	reflect "reflect"

	driver "github.com/eolinker/apinto-dashboard/driver-manager/driver"
	gomock "github.com/golang/mock/gomock"
)

// MockIAPIService is a mock of IAPIService interface.
type MockIAPIService struct {
	ctrl     *gomock.Controller
	recorder *MockIAPIServiceMockRecorder
}

// MockIAPIServiceMockRecorder is the mock recorder for MockIAPIService.
type MockIAPIServiceMockRecorder struct {
	mock *MockIAPIService
}

// NewMockIAPIService creates a new mock instance.
func NewMockIAPIService(ctrl *gomock.Controller) *MockIAPIService {
	mock := &MockIAPIService{ctrl: ctrl}
	mock.recorder = &MockIAPIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAPIService) EXPECT() *MockIAPIServiceMockRecorder {
	return m.recorder
}

// BatchOffline mocks base method.
func (m *MockIAPIService) BatchOffline(ctx context.Context, namespaceId, operator int, apiUUIDs, clusterNames []string) ([]*apimodel.BatchListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchOffline", ctx, namespaceId, operator, apiUUIDs, clusterNames)
	ret0, _ := ret[0].([]*apimodel.BatchListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchOffline indicates an expected call of BatchOffline.
func (mr *MockIAPIServiceMockRecorder) BatchOffline(ctx, namespaceId, operator, apiUUIDs, clusterNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchOffline", reflect.TypeOf((*MockIAPIService)(nil).BatchOffline), ctx, namespaceId, operator, apiUUIDs, clusterNames)
}

// BatchOnline mocks base method.
func (m *MockIAPIService) BatchOnline(ctx context.Context, namespaceId, operator int, onlineToken string) ([]*apimodel.BatchListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchOnline", ctx, namespaceId, operator, onlineToken)
	ret0, _ := ret[0].([]*apimodel.BatchListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchOnline indicates an expected call of BatchOnline.
func (mr *MockIAPIServiceMockRecorder) BatchOnline(ctx, namespaceId, operator, onlineToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchOnline", reflect.TypeOf((*MockIAPIService)(nil).BatchOnline), ctx, namespaceId, operator, onlineToken)
}

// BatchOnlineCheck mocks base method.
func (m *MockIAPIService) BatchOnlineCheck(ctx context.Context, namespaceId, operator int, apiUUIDs, clusterNames []string) ([]*apimodel.BatchOnlineCheckListItem, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchOnlineCheck", ctx, namespaceId, operator, apiUUIDs, clusterNames)
	ret0, _ := ret[0].([]*apimodel.BatchOnlineCheckListItem)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// BatchOnlineCheck indicates an expected call of BatchOnlineCheck.
func (mr *MockIAPIServiceMockRecorder) BatchOnlineCheck(ctx, namespaceId, operator, apiUUIDs, clusterNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchOnlineCheck", reflect.TypeOf((*MockIAPIService)(nil).BatchOnlineCheck), ctx, namespaceId, operator, apiUUIDs, clusterNames)
}

// CreateAPI mocks base method.
func (m *MockIAPIService) CreateAPI(ctx context.Context, namespaceID, operator int, input *dto.APIInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAPI", ctx, namespaceID, operator, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAPI indicates an expected call of CreateAPI.
func (mr *MockIAPIServiceMockRecorder) CreateAPI(ctx, namespaceID, operator, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAPI", reflect.TypeOf((*MockIAPIService)(nil).CreateAPI), ctx, namespaceID, operator, input)
}

// DeleteAPI mocks base method.
func (m *MockIAPIService) DeleteAPI(ctx context.Context, namespaceId, operator int, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAPI", ctx, namespaceId, operator, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAPI indicates an expected call of DeleteAPI.
func (mr *MockIAPIServiceMockRecorder) DeleteAPI(ctx, namespaceId, operator, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAPI", reflect.TypeOf((*MockIAPIService)(nil).DeleteAPI), ctx, namespaceId, operator, uuid)
}

// DisableAPI mocks base method.
func (m *MockIAPIService) DisableAPI(ctx context.Context, namespaceId, operator int, uuid, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableAPI", ctx, namespaceId, operator, uuid, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableAPI indicates an expected call of DisableAPI.
func (mr *MockIAPIServiceMockRecorder) DisableAPI(ctx, namespaceId, operator, uuid, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableAPI", reflect.TypeOf((*MockIAPIService)(nil).DisableAPI), ctx, namespaceId, operator, uuid, clusterName)
}

// EnableAPI mocks base method.
func (m *MockIAPIService) EnableAPI(ctx context.Context, namespaceId, operator int, uuid, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableAPI", ctx, namespaceId, operator, uuid, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableAPI indicates an expected call of EnableAPI.
func (mr *MockIAPIServiceMockRecorder) EnableAPI(ctx, namespaceId, operator, uuid, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableAPI", reflect.TypeOf((*MockIAPIService)(nil).EnableAPI), ctx, namespaceId, operator, uuid, clusterName)
}

// GetAPICountByGroupUUID mocks base method.
func (m *MockIAPIService) GetAPICountByGroupUUID(ctx context.Context, namespaceID int, groupUUID string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPICountByGroupUUID", ctx, namespaceID, groupUUID)
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetAPICountByGroupUUID indicates an expected call of GetAPICountByGroupUUID.
func (mr *MockIAPIServiceMockRecorder) GetAPICountByGroupUUID(ctx, namespaceID, groupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPICountByGroupUUID", reflect.TypeOf((*MockIAPIService)(nil).GetAPICountByGroupUUID), ctx, namespaceID, groupUUID)
}

// GetAPIDriver mocks base method.
func (m *MockIAPIService) GetAPIDriver(driverName string) driver.IAPIDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIDriver", driverName)
	ret0, _ := ret[0].(driver.IAPIDriver)
	return ret0
}

// GetAPIDriver indicates an expected call of GetAPIDriver.
func (mr *MockIAPIServiceMockRecorder) GetAPIDriver(driverName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIDriver", reflect.TypeOf((*MockIAPIService)(nil).GetAPIDriver), driverName)
}

// GetAPIInfo mocks base method.
func (m *MockIAPIService) GetAPIInfo(ctx context.Context, namespaceID int, uuid string) (*apimodel.APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfo", ctx, namespaceID, uuid)
	ret0, _ := ret[0].(*apimodel.APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfo indicates an expected call of GetAPIInfo.
func (mr *MockIAPIServiceMockRecorder) GetAPIInfo(ctx, namespaceID, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfo", reflect.TypeOf((*MockIAPIService)(nil).GetAPIInfo), ctx, namespaceID, uuid)
}

// GetAPIInfoAll mocks base method.
func (m *MockIAPIService) GetAPIInfoAll(ctx context.Context, namespaceID int) ([]*apimodel.APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfoAll", ctx, namespaceID)
	ret0, _ := ret[0].([]*apimodel.APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfoAll indicates an expected call of GetAPIInfoAll.
func (mr *MockIAPIServiceMockRecorder) GetAPIInfoAll(ctx, namespaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfoAll", reflect.TypeOf((*MockIAPIService)(nil).GetAPIInfoAll), ctx, namespaceID)
}

// GetAPIInfoByGroupUUID mocks base method.
func (m *MockIAPIService) GetAPIInfoByGroupUUID(ctx context.Context, namespaceID int, groupUUID string) ([]*apimodel.APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfoByGroupUUID", ctx, namespaceID, groupUUID)
	ret0, _ := ret[0].([]*apimodel.APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfoByGroupUUID indicates an expected call of GetAPIInfoByGroupUUID.
func (mr *MockIAPIServiceMockRecorder) GetAPIInfoByGroupUUID(ctx, namespaceID, groupUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfoByGroupUUID", reflect.TypeOf((*MockIAPIService)(nil).GetAPIInfoByGroupUUID), ctx, namespaceID, groupUUID)
}

// GetAPIInfoByUUIDS mocks base method.
func (m *MockIAPIService) GetAPIInfoByUUIDS(ctx context.Context, namespaceID int, uuids []string) ([]*apimodel.APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIInfoByUUIDS", ctx, namespaceID, uuids)
	ret0, _ := ret[0].([]*apimodel.APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIInfoByUUIDS indicates an expected call of GetAPIInfoByUUIDS.
func (mr *MockIAPIServiceMockRecorder) GetAPIInfoByUUIDS(ctx, namespaceID, uuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIInfoByUUIDS", reflect.TypeOf((*MockIAPIService)(nil).GetAPIInfoByUUIDS), ctx, namespaceID, uuids)
}

// GetAPIList mocks base method.
func (m *MockIAPIService) GetAPIList(ctx context.Context, namespaceID int, groupUUID, searchName string, searchSources []string, pageNum, pageSize int) ([]*apimodel.APIListItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIList", ctx, namespaceID, groupUUID, searchName, searchSources, pageNum, pageSize)
	ret0, _ := ret[0].([]*apimodel.APIListItem)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAPIList indicates an expected call of GetAPIList.
func (mr *MockIAPIServiceMockRecorder) GetAPIList(ctx, namespaceID, groupUUID, searchName, searchSources, pageNum, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIList", reflect.TypeOf((*MockIAPIService)(nil).GetAPIList), ctx, namespaceID, groupUUID, searchName, searchSources, pageNum, pageSize)
}

// GetAPIListByName mocks base method.
func (m *MockIAPIService) GetAPIListByName(ctx context.Context, namespaceId int, name string) ([]*group_model.CommonGroupApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIListByName", ctx, namespaceId, name)
	ret0, _ := ret[0].([]*group_model.CommonGroupApi)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIListByName indicates an expected call of GetAPIListByName.
func (mr *MockIAPIServiceMockRecorder) GetAPIListByName(ctx, namespaceId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIListByName", reflect.TypeOf((*MockIAPIService)(nil).GetAPIListByName), ctx, namespaceId, name)
}

// GetAPIListByServiceName mocks base method.
func (m *MockIAPIService) GetAPIListByServiceName(ctx context.Context, namespaceId int, serviceName []string) ([]*apimodel.APIInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIListByServiceName", ctx, namespaceId, serviceName)
	ret0, _ := ret[0].([]*apimodel.APIInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIListByServiceName indicates an expected call of GetAPIListByServiceName.
func (mr *MockIAPIServiceMockRecorder) GetAPIListByServiceName(ctx, namespaceId, serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIListByServiceName", reflect.TypeOf((*MockIAPIService)(nil).GetAPIListByServiceName), ctx, namespaceId, serviceName)
}

// GetAPIListItemAll mocks base method.
func (m *MockIAPIService) GetAPIListItemAll(ctx context.Context, namespaceID int) ([]*apimodel.APIListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIListItemAll", ctx, namespaceID)
	ret0, _ := ret[0].([]*apimodel.APIListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIListItemAll indicates an expected call of GetAPIListItemAll.
func (mr *MockIAPIServiceMockRecorder) GetAPIListItemAll(ctx, namespaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIListItemAll", reflect.TypeOf((*MockIAPIService)(nil).GetAPIListItemAll), ctx, namespaceID)
}

// GetAPIListItemByUUIDS mocks base method.
func (m *MockIAPIService) GetAPIListItemByUUIDS(ctx context.Context, namespaceID int, uuids []string) ([]*apimodel.APIListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIListItemByUUIDS", ctx, namespaceID, uuids)
	ret0, _ := ret[0].([]*apimodel.APIListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIListItemByUUIDS indicates an expected call of GetAPIListItemByUUIDS.
func (mr *MockIAPIServiceMockRecorder) GetAPIListItemByUUIDS(ctx, namespaceID, uuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIListItemByUUIDS", reflect.TypeOf((*MockIAPIService)(nil).GetAPIListItemByUUIDS), ctx, namespaceID, uuids)
}

// GetAPINameByID mocks base method.
func (m *MockIAPIService) GetAPINameByID(ctx context.Context, apiID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPINameByID", ctx, apiID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPINameByID indicates an expected call of GetAPINameByID.
func (mr *MockIAPIServiceMockRecorder) GetAPINameByID(ctx, apiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPINameByID", reflect.TypeOf((*MockIAPIService)(nil).GetAPINameByID), ctx, apiID)
}

// GetAPIRemoteByUUIDS mocks base method.
func (m *MockIAPIService) GetAPIRemoteByUUIDS(ctx context.Context, namespace int, uuids []string) ([]*model.RemoteApis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIRemoteByUUIDS", ctx, namespace, uuids)
	ret0, _ := ret[0].([]*model.RemoteApis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIRemoteByUUIDS indicates an expected call of GetAPIRemoteByUUIDS.
func (mr *MockIAPIServiceMockRecorder) GetAPIRemoteByUUIDS(ctx, namespace, uuids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIRemoteByUUIDS", reflect.TypeOf((*MockIAPIService)(nil).GetAPIRemoteByUUIDS), ctx, namespace, uuids)
}

// GetAPIRemoteOptions mocks base method.
func (m *MockIAPIService) GetAPIRemoteOptions(ctx context.Context, namespaceId, pageNum, pageSize int, keyword, groupUuid string) ([]*model.RemoteApis, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIRemoteOptions", ctx, namespaceId, pageNum, pageSize, keyword, groupUuid)
	ret0, _ := ret[0].([]*model.RemoteApis)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAPIRemoteOptions indicates an expected call of GetAPIRemoteOptions.
func (mr *MockIAPIServiceMockRecorder) GetAPIRemoteOptions(ctx, namespaceId, pageNum, pageSize, keyword, groupUuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIRemoteOptions", reflect.TypeOf((*MockIAPIService)(nil).GetAPIRemoteOptions), ctx, namespaceId, pageNum, pageSize, keyword, groupUuid)
}

// GetAPIVersionInfo mocks base method.
func (m *MockIAPIService) GetAPIVersionInfo(ctx context.Context, namespaceID int, uuid string) (*apimodel.APIVersionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAPIVersionInfo", ctx, namespaceID, uuid)
	ret0, _ := ret[0].(*apimodel.APIVersionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAPIVersionInfo indicates an expected call of GetAPIVersionInfo.
func (mr *MockIAPIServiceMockRecorder) GetAPIVersionInfo(ctx, namespaceID, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAPIVersionInfo", reflect.TypeOf((*MockIAPIService)(nil).GetAPIVersionInfo), ctx, namespaceID, uuid)
}

// GetGroups mocks base method.
func (m *MockIAPIService) GetGroups(ctx context.Context, namespaceId int, parentUuid, queryName string) (*group_model.CommonGroupRoot, []*group_model.CommonGroupApi, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroups", ctx, namespaceId, parentUuid, queryName)
	ret0, _ := ret[0].(*group_model.CommonGroupRoot)
	ret1, _ := ret[1].([]*group_model.CommonGroupApi)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetGroups indicates an expected call of GetGroups.
func (mr *MockIAPIServiceMockRecorder) GetGroups(ctx, namespaceId, parentUuid, queryName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroups", reflect.TypeOf((*MockIAPIService)(nil).GetGroups), ctx, namespaceId, parentUuid, queryName)
}

// GetImportCheckList mocks base method.
func (m *MockIAPIService) GetImportCheckList(ctx context.Context, namespaceId int, fileData []byte, groupID, serviceName, requestPrefix string) ([]*apimodel.ImportAPIListItem, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImportCheckList", ctx, namespaceId, fileData, groupID, serviceName, requestPrefix)
	ret0, _ := ret[0].([]*apimodel.ImportAPIListItem)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImportCheckList indicates an expected call of GetImportCheckList.
func (mr *MockIAPIServiceMockRecorder) GetImportCheckList(ctx, namespaceId, fileData, groupID, serviceName, requestPrefix interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImportCheckList", reflect.TypeOf((*MockIAPIService)(nil).GetImportCheckList), ctx, namespaceId, fileData, groupID, serviceName, requestPrefix)
}

// GetLatestAPIVersion mocks base method.
func (m *MockIAPIService) GetLatestAPIVersion(ctx context.Context, apiId int) (*api_entry.APIVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestAPIVersion", ctx, apiId)
	ret0, _ := ret[0].(*api_entry.APIVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestAPIVersion indicates an expected call of GetLatestAPIVersion.
func (mr *MockIAPIServiceMockRecorder) GetLatestAPIVersion(ctx, apiId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestAPIVersion", reflect.TypeOf((*MockIAPIService)(nil).GetLatestAPIVersion), ctx, apiId)
}

// GetSource mocks base method.
func (m *MockIAPIService) GetSource(ctx context.Context) ([]*apimodel.SourceListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSource", ctx)
	ret0, _ := ret[0].([]*apimodel.SourceListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSource indicates an expected call of GetSource.
func (mr *MockIAPIServiceMockRecorder) GetSource(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSource", reflect.TypeOf((*MockIAPIService)(nil).GetSource), ctx)
}

// ImportAPI mocks base method.
func (m *MockIAPIService) ImportAPI(ctx context.Context, namespaceId, operator int, input *dto.ImportAPIInfos) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportAPI", ctx, namespaceId, operator, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportAPI indicates an expected call of ImportAPI.
func (mr *MockIAPIServiceMockRecorder) ImportAPI(ctx, namespaceId, operator, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportAPI", reflect.TypeOf((*MockIAPIService)(nil).ImportAPI), ctx, namespaceId, operator, input)
}

// IsAPIOnline mocks base method.
func (m *MockIAPIService) IsAPIOnline(ctx context.Context, clusterId, apiID int) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAPIOnline", ctx, clusterId, apiID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAPIOnline indicates an expected call of IsAPIOnline.
func (mr *MockIAPIServiceMockRecorder) IsAPIOnline(ctx, clusterId, apiID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAPIOnline", reflect.TypeOf((*MockIAPIService)(nil).IsAPIOnline), ctx, clusterId, apiID)
}

// OfflineAPI mocks base method.
func (m *MockIAPIService) OfflineAPI(ctx context.Context, namespaceId, operator int, uuid, clusterName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfflineAPI", ctx, namespaceId, operator, uuid, clusterName)
	ret0, _ := ret[0].(error)
	return ret0
}

// OfflineAPI indicates an expected call of OfflineAPI.
func (mr *MockIAPIServiceMockRecorder) OfflineAPI(ctx, namespaceId, operator, uuid, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfflineAPI", reflect.TypeOf((*MockIAPIService)(nil).OfflineAPI), ctx, namespaceId, operator, uuid, clusterName)
}

// OnlineAPI mocks base method.
func (m *MockIAPIService) OnlineAPI(ctx context.Context, namespaceId, operator int, uuid, clusterName string) (*frontend_model.Router, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlineAPI", ctx, namespaceId, operator, uuid, clusterName)
	ret0, _ := ret[0].(*frontend_model.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnlineAPI indicates an expected call of OnlineAPI.
func (mr *MockIAPIServiceMockRecorder) OnlineAPI(ctx, namespaceId, operator, uuid, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlineAPI", reflect.TypeOf((*MockIAPIService)(nil).OnlineAPI), ctx, namespaceId, operator, uuid, clusterName)
}

// OnlineList mocks base method.
func (m *MockIAPIService) OnlineList(ctx context.Context, namespaceId int, uuid string) ([]*apimodel.APIOnlineListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnlineList", ctx, namespaceId, uuid)
	ret0, _ := ret[0].([]*apimodel.APIOnlineListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OnlineList indicates an expected call of OnlineList.
func (mr *MockIAPIServiceMockRecorder) OnlineList(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnlineList", reflect.TypeOf((*MockIAPIService)(nil).OnlineList), ctx, namespaceId, uuid)
}

// ResetOnline mocks base method.
func (m *MockIAPIService) ResetOnline(ctx context.Context, namespaceId, clusterId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetOnline", ctx, namespaceId, clusterId)
}

// ResetOnline indicates an expected call of ResetOnline.
func (mr *MockIAPIServiceMockRecorder) ResetOnline(ctx, namespaceId, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetOnline", reflect.TypeOf((*MockIAPIService)(nil).ResetOnline), ctx, namespaceId, clusterId)
}

// UpdateAPI mocks base method.
func (m *MockIAPIService) UpdateAPI(ctx context.Context, namespaceID, operator int, input *dto.APIInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAPI", ctx, namespaceID, operator, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAPI indicates an expected call of UpdateAPI.
func (mr *MockIAPIServiceMockRecorder) UpdateAPI(ctx, namespaceID, operator, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAPI", reflect.TypeOf((*MockIAPIService)(nil).UpdateAPI), ctx, namespaceID, operator, input)
}
