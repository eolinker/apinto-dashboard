// Code generated by MockGen. DO NOT EDIT.
// Source: monitor/monitor.go

// Package mock_monitor is a generated GoMock package.
package mock_monitor

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/eolinker/apinto-dashboard/modules/monitor/model"
	monitor_dto "github.com/eolinker/apinto-dashboard/modules/monitor/monitor-dto"
	warn_model "github.com/eolinker/apinto-dashboard/modules/warn/warn-model"
	gomock "github.com/golang/mock/gomock"
)

// MockIMonitorService is a mock of IMonitorService interface.
type MockIMonitorService struct {
	ctrl     *gomock.Controller
	recorder *MockIMonitorServiceMockRecorder
}

// MockIMonitorServiceMockRecorder is the mock recorder for MockIMonitorService.
type MockIMonitorServiceMockRecorder struct {
	mock *MockIMonitorService
}

// NewMockIMonitorService creates a new mock instance.
func NewMockIMonitorService(ctrl *gomock.Controller) *MockIMonitorService {
	mock := &MockIMonitorService{ctrl: ctrl}
	mock.recorder = &MockIMonitorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMonitorService) EXPECT() *MockIMonitorServiceMockRecorder {
	return m.recorder
}

// CheckInput mocks base method.
func (m *MockIMonitorService) CheckInput(sourceType string, input []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInput", sourceType, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInput indicates an expected call of CheckInput.
func (mr *MockIMonitorServiceMockRecorder) CheckInput(sourceType, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInput", reflect.TypeOf((*MockIMonitorService)(nil).CheckInput), sourceType, input)
}

// CreatePartition mocks base method.
func (m *MockIMonitorService) CreatePartition(ctx context.Context, namespaceId, userId int, input *monitor_dto.MonitorPartitionInfoProxy) (*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", ctx, namespaceId, userId, input)
	ret0, _ := ret[0].(*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockIMonitorServiceMockRecorder) CreatePartition(ctx, namespaceId, userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockIMonitorService)(nil).CreatePartition), ctx, namespaceId, userId, input)
}

// DelPartition mocks base method.
func (m *MockIMonitorService) DelPartition(ctx context.Context, namespaceId int, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPartition", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPartition indicates an expected call of DelPartition.
func (mr *MockIMonitorServiceMockRecorder) DelPartition(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPartition", reflect.TypeOf((*MockIMonitorService)(nil).DelPartition), ctx, namespaceId, uuid)
}

// GetInfluxDbConfig mocks base method.
func (m *MockIMonitorService) GetInfluxDbConfig(ctx context.Context, namespaceId int, uuid string) (*model.MonitorInfluxV2Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluxDbConfig", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(*model.MonitorInfluxV2Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluxDbConfig indicates an expected call of GetInfluxDbConfig.
func (mr *MockIMonitorServiceMockRecorder) GetInfluxDbConfig(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluxDbConfig", reflect.TypeOf((*MockIMonitorService)(nil).GetInfluxDbConfig), ctx, namespaceId, uuid)
}

// PartitionById mocks base method.
func (m *MockIMonitorService) PartitionById(ctx context.Context, id int) (*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionById", ctx, id)
	ret0, _ := ret[0].(*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionById indicates an expected call of PartitionById.
func (mr *MockIMonitorServiceMockRecorder) PartitionById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionById", reflect.TypeOf((*MockIMonitorService)(nil).PartitionById), ctx, id)
}

// PartitionInfo mocks base method.
func (m *MockIMonitorService) PartitionInfo(ctx context.Context, namespaceId int, uuid string) (*model.MonPartitionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionInfo", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(*model.MonPartitionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionInfo indicates an expected call of PartitionInfo.
func (mr *MockIMonitorServiceMockRecorder) PartitionInfo(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionInfo", reflect.TypeOf((*MockIMonitorService)(nil).PartitionInfo), ctx, namespaceId, uuid)
}

// PartitionList mocks base method.
func (m *MockIMonitorService) PartitionList(ctx context.Context, namespaceId int) ([]*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionList", ctx, namespaceId)
	ret0, _ := ret[0].([]*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionList indicates an expected call of PartitionList.
func (mr *MockIMonitorServiceMockRecorder) PartitionList(ctx, namespaceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionList", reflect.TypeOf((*MockIMonitorService)(nil).PartitionList), ctx, namespaceId)
}

// UpdatePartition mocks base method.
func (m *MockIMonitorService) UpdatePartition(ctx context.Context, namespaceId, userId int, uuid string, input *monitor_dto.MonitorPartitionInfoProxy) (*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartition", ctx, namespaceId, userId, uuid, input)
	ret0, _ := ret[0].(*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockIMonitorServiceMockRecorder) UpdatePartition(ctx, namespaceId, userId, uuid, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockIMonitorService)(nil).UpdatePartition), ctx, namespaceId, userId, uuid, input)
}

// MockIMonitorStatistics is a mock of IMonitorStatistics interface.
type MockIMonitorStatistics struct {
	ctrl     *gomock.Controller
	recorder *MockIMonitorStatisticsMockRecorder
}

// MockIMonitorStatisticsMockRecorder is the mock recorder for MockIMonitorStatistics.
type MockIMonitorStatisticsMockRecorder struct {
	mock *MockIMonitorStatistics
}

// NewMockIMonitorStatistics creates a new mock instance.
func NewMockIMonitorStatistics(ctrl *gomock.Controller) *MockIMonitorStatistics {
	mock := &MockIMonitorStatistics{ctrl: ctrl}
	mock.recorder = &MockIMonitorStatisticsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMonitorStatistics) EXPECT() *MockIMonitorStatisticsMockRecorder {
	return m.recorder
}

// CircularMap mocks base method.
func (m *MockIMonitorStatistics) CircularMap(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.CircularDate, *model.CircularDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CircularMap", ctx, namespaceId, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.CircularDate)
	ret1, _ := ret[1].(*model.CircularDate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CircularMap indicates an expected call of CircularMap.
func (mr *MockIMonitorStatisticsMockRecorder) CircularMap(ctx, namespaceId, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CircularMap", reflect.TypeOf((*MockIMonitorStatistics)(nil).CircularMap), ctx, namespaceId, partitionId, start, end, wheres)
}

// IPTrend mocks base method.
func (m *MockIMonitorStatistics) IPTrend(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.MonCallCountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IPTrend", ctx, namespaceId, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.MonCallCountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IPTrend indicates an expected call of IPTrend.
func (mr *MockIMonitorStatisticsMockRecorder) IPTrend(ctx, namespaceId, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IPTrend", reflect.TypeOf((*MockIMonitorStatistics)(nil).IPTrend), ctx, namespaceId, partitionId, start, end, wheres)
}

// MessageTrend mocks base method.
func (m *MockIMonitorStatistics) MessageTrend(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.MessageTrend, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageTrend", ctx, namespaceId, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.MessageTrend)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MessageTrend indicates an expected call of MessageTrend.
func (mr *MockIMonitorStatisticsMockRecorder) MessageTrend(ctx, namespaceId, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageTrend", reflect.TypeOf((*MockIMonitorStatistics)(nil).MessageTrend), ctx, namespaceId, partitionId, start, end, wheres)
}

// ProxyStatistics mocks base method.
func (m *MockIMonitorStatistics) ProxyStatistics(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, groupBy string, wheres []model.MonWhereItem, limit int) (map[string]model.MonCommonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyStatistics", ctx, namespaceId, partitionId, start, end, groupBy, wheres, limit)
	ret0, _ := ret[0].(map[string]model.MonCommonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProxyStatistics indicates an expected call of ProxyStatistics.
func (mr *MockIMonitorStatisticsMockRecorder) ProxyStatistics(ctx, namespaceId, partitionId, start, end, groupBy, wheres, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyStatistics", reflect.TypeOf((*MockIMonitorStatistics)(nil).ProxyStatistics), ctx, namespaceId, partitionId, start, end, groupBy, wheres, limit)
}

// ProxyTrend mocks base method.
func (m *MockIMonitorStatistics) ProxyTrend(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.MonCallCountInfo, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProxyTrend", ctx, namespaceId, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.MonCallCountInfo)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProxyTrend indicates an expected call of ProxyTrend.
func (mr *MockIMonitorStatisticsMockRecorder) ProxyTrend(ctx, namespaceId, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProxyTrend", reflect.TypeOf((*MockIMonitorStatistics)(nil).ProxyTrend), ctx, namespaceId, partitionId, start, end, wheres)
}

// Statistics mocks base method.
func (m *MockIMonitorStatistics) Statistics(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, groupBy string, wheres []model.MonWhereItem, limit int) (map[string]model.MonCommonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistics", ctx, namespaceId, partitionId, start, end, groupBy, wheres, limit)
	ret0, _ := ret[0].(map[string]model.MonCommonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statistics indicates an expected call of Statistics.
func (mr *MockIMonitorStatisticsMockRecorder) Statistics(ctx, namespaceId, partitionId, start, end, groupBy, wheres, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistics", reflect.TypeOf((*MockIMonitorStatistics)(nil).Statistics), ctx, namespaceId, partitionId, start, end, groupBy, wheres, limit)
}

// Trend mocks base method.
func (m *MockIMonitorStatistics) Trend(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.MonCallCountInfo, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trend", ctx, namespaceId, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.MonCallCountInfo)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Trend indicates an expected call of Trend.
func (mr *MockIMonitorStatisticsMockRecorder) Trend(ctx, namespaceId, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trend", reflect.TypeOf((*MockIMonitorStatistics)(nil).Trend), ctx, namespaceId, partitionId, start, end, wheres)
}

// WarnStatistics mocks base method.
func (m *MockIMonitorStatistics) WarnStatistics(ctx context.Context, namespaceId int, partitionId string, start, end time.Time, group string, quotaType warn_model.QuotaType, wheres []model.MonWhereItem) (map[string]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnStatistics", ctx, namespaceId, partitionId, start, end, group, quotaType, wheres)
	ret0, _ := ret[0].(map[string]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WarnStatistics indicates an expected call of WarnStatistics.
func (mr *MockIMonitorStatisticsMockRecorder) WarnStatistics(ctx, namespaceId, partitionId, start, end, group, quotaType, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnStatistics", reflect.TypeOf((*MockIMonitorStatistics)(nil).WarnStatistics), ctx, namespaceId, partitionId, start, end, group, quotaType, wheres)
}

// MockIMonitorStatisticsCache is a mock of IMonitorStatisticsCache interface.
type MockIMonitorStatisticsCache struct {
	ctrl     *gomock.Controller
	recorder *MockIMonitorStatisticsCacheMockRecorder
}

// MockIMonitorStatisticsCacheMockRecorder is the mock recorder for MockIMonitorStatisticsCache.
type MockIMonitorStatisticsCacheMockRecorder struct {
	mock *MockIMonitorStatisticsCache
}

// NewMockIMonitorStatisticsCache creates a new mock instance.
func NewMockIMonitorStatisticsCache(ctrl *gomock.Controller) *MockIMonitorStatisticsCache {
	mock := &MockIMonitorStatisticsCache{ctrl: ctrl}
	mock.recorder = &MockIMonitorStatisticsCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMonitorStatisticsCache) EXPECT() *MockIMonitorStatisticsCacheMockRecorder {
	return m.recorder
}

// GetCircularMap mocks base method.
func (m *MockIMonitorStatisticsCache) GetCircularMap(ctx context.Context, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.CircularDate, *model.CircularDate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircularMap", ctx, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.CircularDate)
	ret1, _ := ret[1].(*model.CircularDate)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCircularMap indicates an expected call of GetCircularMap.
func (mr *MockIMonitorStatisticsCacheMockRecorder) GetCircularMap(ctx, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircularMap", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).GetCircularMap), ctx, partitionId, start, end, wheres)
}

// GetMessageTrend mocks base method.
func (m *MockIMonitorStatisticsCache) GetMessageTrend(ctx context.Context, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.MessageTrend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageTrend", ctx, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.MessageTrend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageTrend indicates an expected call of GetMessageTrend.
func (mr *MockIMonitorStatisticsCacheMockRecorder) GetMessageTrend(ctx, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageTrend", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).GetMessageTrend), ctx, partitionId, start, end, wheres)
}

// GetStatisticsCache mocks base method.
func (m *MockIMonitorStatisticsCache) GetStatisticsCache(ctx context.Context, partitionId string, start, end time.Time, groupBy string, wheres []model.MonWhereItem, limit int) (map[string]model.MonCommonData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsCache", ctx, partitionId, start, end, groupBy, wheres, limit)
	ret0, _ := ret[0].(map[string]model.MonCommonData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsCache indicates an expected call of GetStatisticsCache.
func (mr *MockIMonitorStatisticsCacheMockRecorder) GetStatisticsCache(ctx, partitionId, start, end, groupBy, wheres, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsCache", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).GetStatisticsCache), ctx, partitionId, start, end, groupBy, wheres, limit)
}

// GetTrendCache mocks base method.
func (m *MockIMonitorStatisticsCache) GetTrendCache(ctx context.Context, partitionId string, start, end time.Time, wheres []model.MonWhereItem) (*model.MonCallCountInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrendCache", ctx, partitionId, start, end, wheres)
	ret0, _ := ret[0].(*model.MonCallCountInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrendCache indicates an expected call of GetTrendCache.
func (mr *MockIMonitorStatisticsCacheMockRecorder) GetTrendCache(ctx, partitionId, start, end, wheres interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrendCache", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).GetTrendCache), ctx, partitionId, start, end, wheres)
}

// SetCircularMap mocks base method.
func (m *MockIMonitorStatisticsCache) SetCircularMap(ctx context.Context, partitionId string, start, end time.Time, wheres []model.MonWhereItem, request, proxy *model.CircularDate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCircularMap", ctx, partitionId, start, end, wheres, request, proxy)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCircularMap indicates an expected call of SetCircularMap.
func (mr *MockIMonitorStatisticsCacheMockRecorder) SetCircularMap(ctx, partitionId, start, end, wheres, request, proxy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCircularMap", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).SetCircularMap), ctx, partitionId, start, end, wheres, request, proxy)
}

// SetMessageTrend mocks base method.
func (m *MockIMonitorStatisticsCache) SetMessageTrend(ctx context.Context, partitionId string, start, end time.Time, wheres []model.MonWhereItem, val *model.MessageTrend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMessageTrend", ctx, partitionId, start, end, wheres, val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMessageTrend indicates an expected call of SetMessageTrend.
func (mr *MockIMonitorStatisticsCacheMockRecorder) SetMessageTrend(ctx, partitionId, start, end, wheres, val interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMessageTrend", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).SetMessageTrend), ctx, partitionId, start, end, wheres, val)
}

// SetStatisticsCache mocks base method.
func (m *MockIMonitorStatisticsCache) SetStatisticsCache(ctx context.Context, partitionId string, start, end time.Time, groupBy string, wheres []model.MonWhereItem, limit int, values map[string]model.MonCommonData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatisticsCache", ctx, partitionId, start, end, groupBy, wheres, limit, values)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatisticsCache indicates an expected call of SetStatisticsCache.
func (mr *MockIMonitorStatisticsCacheMockRecorder) SetStatisticsCache(ctx, partitionId, start, end, groupBy, wheres, limit, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatisticsCache", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).SetStatisticsCache), ctx, partitionId, start, end, groupBy, wheres, limit, values)
}

// SetTrendCache mocks base method.
func (m *MockIMonitorStatisticsCache) SetTrendCache(ctx context.Context, partitionId string, start, end time.Time, wheres []model.MonWhereItem, value *model.MonCallCountInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTrendCache", ctx, partitionId, start, end, wheres, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTrendCache indicates an expected call of SetTrendCache.
func (mr *MockIMonitorStatisticsCacheMockRecorder) SetTrendCache(ctx, partitionId, start, end, wheres, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrendCache", reflect.TypeOf((*MockIMonitorStatisticsCache)(nil).SetTrendCache), ctx, partitionId, start, end, wheres, value)
}
