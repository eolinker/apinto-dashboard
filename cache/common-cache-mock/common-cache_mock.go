// Code generated by MockGen. DO NOT EDIT.
// Source: cache/common.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockICommonCache is a mock of ICommonCache interface.
type MockICommonCache struct {
	ctrl     *gomock.Controller
	recorder *MockICommonCacheMockRecorder
}

// MockICommonCacheMockRecorder is the mock recorder for MockICommonCache.
type MockICommonCacheMockRecorder struct {
	mock *MockICommonCache
}

// NewMockICommonCache creates a new mock instance.
func NewMockICommonCache(ctrl *gomock.Controller) *MockICommonCache {
	mock := &MockICommonCache{ctrl: ctrl}
	mock.recorder = &MockICommonCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommonCache) EXPECT() *MockICommonCacheMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockICommonCache) Del(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockICommonCacheMockRecorder) Del(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockICommonCache)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *MockICommonCache) Get(ctx context.Context, key string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockICommonCacheMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockICommonCache)(nil).Get), ctx, key)
}

// GetInt mocks base method.
func (m *MockICommonCache) GetInt(ctx context.Context, key string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockICommonCacheMockRecorder) GetInt(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockICommonCache)(nil).GetInt), ctx, key)
}

// HDel mocks base method.
func (m *MockICommonCache) HDel(ctx context.Context, key string, fields ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, key}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HDel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// HDel indicates an expected call of HDel.
func (mr *MockICommonCacheMockRecorder) HDel(ctx, key interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, key}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HDel", reflect.TypeOf((*MockICommonCache)(nil).HDel), varargs...)
}

// HGetAll mocks base method.
func (m *MockICommonCache) HGetAll(ctx context.Context, key string) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HGetAll", ctx, key)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HGetAll indicates an expected call of HGetAll.
func (mr *MockICommonCacheMockRecorder) HGetAll(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HGetAll", reflect.TypeOf((*MockICommonCache)(nil).HGetAll), ctx, key)
}

// HMSet mocks base method.
func (m *MockICommonCache) HMSet(ctx context.Context, key string, value map[string][]byte, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HMSet", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// HMSet indicates an expected call of HMSet.
func (mr *MockICommonCacheMockRecorder) HMSet(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HMSet", reflect.TypeOf((*MockICommonCache)(nil).HMSet), ctx, key, value, expiration)
}

// Incr mocks base method.
func (m *MockICommonCache) Incr(ctx context.Context, key string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", ctx, key, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockICommonCacheMockRecorder) Incr(ctx, key, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockICommonCache)(nil).Incr), ctx, key, expiration)
}

// IncrBy mocks base method.
func (m *MockICommonCache) IncrBy(ctx context.Context, key string, val int64, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrBy", ctx, key, val, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrBy indicates an expected call of IncrBy.
func (mr *MockICommonCacheMockRecorder) IncrBy(ctx, key, val, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrBy", reflect.TypeOf((*MockICommonCache)(nil).IncrBy), ctx, key, val, expiration)
}

// Set mocks base method.
func (m *MockICommonCache) Set(ctx context.Context, key string, val []byte, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, val, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockICommonCacheMockRecorder) Set(ctx, key, val, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockICommonCache)(nil).Set), ctx, key, val, expiration)
}

// SetNX mocks base method.
func (m *MockICommonCache) SetNX(ctx context.Context, key string, val interface{}, expiration time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNX", ctx, key, val, expiration)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNX indicates an expected call of SetNX.
func (mr *MockICommonCacheMockRecorder) SetNX(ctx, key, val, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNX", reflect.TypeOf((*MockICommonCache)(nil).SetNX), ctx, key, val, expiration)
}
