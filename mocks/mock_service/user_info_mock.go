// Code generated by MockGen. DO NOT EDIT.
// Source: service/user_info.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	dto "github.com/eolinker/apinto-dashboard/modules/user/user-dto"
	user_model2 "github.com/eolinker/apinto-dashboard/modules/user/user-model"
	reflect "reflect"

	access "github.com/eolinker/apinto-dashboard/access"
	gomock "github.com/golang/mock/gomock"
)

// MockIUserInfoService is a mock of IUserInfoService interface.
type MockIUserInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserInfoServiceMockRecorder
}

// MockIUserInfoServiceMockRecorder is the mock recorder for MockIUserInfoService.
type MockIUserInfoServiceMockRecorder struct {
	mock *MockIUserInfoService
}

// NewMockIUserInfoService creates a new mock instance.
func NewMockIUserInfoService(ctrl *gomock.Controller) *MockIUserInfoService {
	mock := &MockIUserInfoService{ctrl: ctrl}
	mock.recorder = &MockIUserInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserInfoService) EXPECT() *MockIUserInfoServiceMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockIUserInfoService) CheckUser(ctx context.Context, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockIUserInfoServiceMockRecorder) CheckUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockIUserInfoService)(nil).CheckUser), ctx, userId)
}

// CleanAdminCache mocks base method.
func (m *MockIUserInfoService) CleanAdminCache() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanAdminCache")
}

// CleanAdminCache indicates an expected call of CleanAdminCache.
func (mr *MockIUserInfoServiceMockRecorder) CleanAdminCache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanAdminCache", reflect.TypeOf((*MockIUserInfoService)(nil).CleanAdminCache))
}

// CreateAdmin mocks base method.
func (m *MockIUserInfoService) CreateAdmin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockIUserInfoServiceMockRecorder) CreateAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockIUserInfoService)(nil).CreateAdmin))
}

// CreateRole mocks base method.
func (m *MockIUserInfoService) CreateRole(ctx context.Context, userID int, input *dto.ProxyRoleInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRole", ctx, userID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRole indicates an expected call of CreateRole.
func (mr *MockIUserInfoServiceMockRecorder) CreateRole(ctx, userID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRole", reflect.TypeOf((*MockIUserInfoService)(nil).CreateRole), ctx, userID, input)
}

// CreateUser mocks base method.
func (m *MockIUserInfoService) CreateUser(ctx context.Context, operator int, userInfo *dto.SaveUserReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, operator, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserInfoServiceMockRecorder) CreateUser(ctx, operator, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUserInfoService)(nil).CreateUser), ctx, operator, userInfo)
}

// DelUser mocks base method.
func (m *MockIUserInfoService) DelUser(ctx context.Context, operator int, userIds []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelUser", ctx, operator, userIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelUser indicates an expected call of DelUser.
func (mr *MockIUserInfoServiceMockRecorder) DelUser(ctx, operator, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelUser", reflect.TypeOf((*MockIUserInfoService)(nil).DelUser), ctx, operator, userIds)
}

// DeleteRole mocks base method.
func (m *MockIUserInfoService) DeleteRole(ctx context.Context, userID int, roleUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRole", ctx, userID, roleUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRole indicates an expected call of DeleteRole.
func (mr *MockIUserInfoServiceMockRecorder) DeleteRole(ctx, userID, roleUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRole", reflect.TypeOf((*MockIUserInfoService)(nil).DeleteRole), ctx, userID, roleUUID)
}

// GetAccessInfo mocks base method.
func (m *MockIUserInfoService) GetAccessInfo(ctx context.Context, userId int) (map[access.Access]struct{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccessInfo", ctx, userId)
	ret0, _ := ret[0].(map[access.Access]struct{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccessInfo indicates an expected call of GetAccessInfo.
func (mr *MockIUserInfoServiceMockRecorder) GetAccessInfo(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccessInfo", reflect.TypeOf((*MockIUserInfoService)(nil).GetAccessInfo), ctx, userId)
}

// GetRoleAccessIds mocks base method.
func (m *MockIUserInfoService) GetRoleAccessIds(ctx context.Context, roleUUID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleAccessIds", ctx, roleUUID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleAccessIds indicates an expected call of GetRoleAccessIds.
func (mr *MockIUserInfoServiceMockRecorder) GetRoleAccessIds(ctx, roleUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleAccessIds", reflect.TypeOf((*MockIUserInfoService)(nil).GetRoleAccessIds), ctx, roleUUID)
}

// GetRoleInfo mocks base method.
func (m *MockIUserInfoService) GetRoleInfo(ctx context.Context, roleID string) (*user_model2.RoleInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleInfo", ctx, roleID)
	ret0, _ := ret[0].(*user_model2.RoleInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleInfo indicates an expected call of GetRoleInfo.
func (mr *MockIUserInfoServiceMockRecorder) GetRoleInfo(ctx, roleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleInfo", reflect.TypeOf((*MockIUserInfoService)(nil).GetRoleInfo), ctx, roleID)
}

// GetRoleList mocks base method.
func (m *MockIUserInfoService) GetRoleList(ctx context.Context, userID int) ([]*user_model2.RoleListItem, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleList", ctx, userID)
	ret0, _ := ret[0].([]*user_model2.RoleListItem)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRoleList indicates an expected call of GetRoleList.
func (mr *MockIUserInfoServiceMockRecorder) GetRoleList(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleList", reflect.TypeOf((*MockIUserInfoService)(nil).GetRoleList), ctx, userID)
}

// GetRoleOptions mocks base method.
func (m *MockIUserInfoService) GetRoleOptions(ctx context.Context) ([]*user_model2.RoleOptionItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoleOptions", ctx)
	ret0, _ := ret[0].([]*user_model2.RoleOptionItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoleOptions indicates an expected call of GetRoleOptions.
func (mr *MockIUserInfoServiceMockRecorder) GetRoleOptions(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoleOptions", reflect.TypeOf((*MockIUserInfoService)(nil).GetRoleOptions), ctx)
}

// GetUserInfo mocks base method.
func (m *MockIUserInfoService) GetUserInfo(ctx context.Context, userId int) (*user_model2.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfo", ctx, userId)
	ret0, _ := ret[0].(*user_model2.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfo indicates an expected call of GetUserInfo.
func (mr *MockIUserInfoServiceMockRecorder) GetUserInfo(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfo", reflect.TypeOf((*MockIUserInfoService)(nil).GetUserInfo), ctx, userId)
}

// GetUserInfoAll mocks base method.
func (m *MockIUserInfoService) GetUserInfoAll(ctx context.Context) ([]*user_model2.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoAll", ctx)
	ret0, _ := ret[0].([]*user_model2.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoAll indicates an expected call of GetUserInfoAll.
func (mr *MockIUserInfoServiceMockRecorder) GetUserInfoAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoAll", reflect.TypeOf((*MockIUserInfoService)(nil).GetUserInfoAll), ctx)
}

// GetUserInfoList mocks base method.
func (m *MockIUserInfoService) GetUserInfoList(ctx context.Context, roleId, keyWord string) ([]*user_model2.UserInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoList", ctx, roleId, keyWord)
	ret0, _ := ret[0].([]*user_model2.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoList indicates an expected call of GetUserInfoList.
func (mr *MockIUserInfoServiceMockRecorder) GetUserInfoList(ctx, roleId, keyWord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoList", reflect.TypeOf((*MockIUserInfoService)(nil).GetUserInfoList), ctx, roleId, keyWord)
}

// GetUserInfoMaps mocks base method.
func (m *MockIUserInfoService) GetUserInfoMaps(ctx context.Context, userId ...int) (map[int]*user_model2.UserInfo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range userId {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetUserInfoMaps", varargs...)
	ret0, _ := ret[0].(map[int]*user_model2.UserInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoMaps indicates an expected call of GetUserInfoMaps.
func (mr *MockIUserInfoServiceMockRecorder) GetUserInfoMaps(ctx interface{}, userId ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, userId...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoMaps", reflect.TypeOf((*MockIUserInfoService)(nil).GetUserInfoMaps), varargs...)
}

// GetUserRoleIds mocks base method.
func (m *MockIUserInfoService) GetUserRoleIds(ctx context.Context, userID int) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleIds", ctx, userID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleIds indicates an expected call of GetUserRoleIds.
func (mr *MockIUserInfoServiceMockRecorder) GetUserRoleIds(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleIds", reflect.TypeOf((*MockIUserInfoService)(nil).GetUserRoleIds), ctx, userID)
}

// PatchUser mocks base method.
func (m *MockIUserInfoService) PatchUser(ctx context.Context, operator, userId int, req *dto.PatchUserReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchUser", ctx, operator, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchUser indicates an expected call of PatchUser.
func (mr *MockIUserInfoServiceMockRecorder) PatchUser(ctx, operator, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchUser", reflect.TypeOf((*MockIUserInfoService)(nil).PatchUser), ctx, operator, userId, req)
}

// ResetUserPwd mocks base method.
func (m *MockIUserInfoService) ResetUserPwd(ctx context.Context, operator, userId int, pwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUserPwd", ctx, operator, userId, pwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUserPwd indicates an expected call of ResetUserPwd.
func (mr *MockIUserInfoServiceMockRecorder) ResetUserPwd(ctx, operator, userId, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUserPwd", reflect.TypeOf((*MockIUserInfoService)(nil).ResetUserPwd), ctx, operator, userId, pwd)
}

// RoleBatchRemove mocks base method.
func (m *MockIUserInfoService) RoleBatchRemove(ctx context.Context, userIds []int, roleUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBatchRemove", ctx, userIds, roleUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleBatchRemove indicates an expected call of RoleBatchRemove.
func (mr *MockIUserInfoServiceMockRecorder) RoleBatchRemove(ctx, userIds, roleUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBatchRemove", reflect.TypeOf((*MockIUserInfoService)(nil).RoleBatchRemove), ctx, userIds, roleUUID)
}

// RoleBatchUpdate mocks base method.
func (m *MockIUserInfoService) RoleBatchUpdate(ctx context.Context, userIds []int, roleUUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoleBatchUpdate", ctx, userIds, roleUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RoleBatchUpdate indicates an expected call of RoleBatchUpdate.
func (mr *MockIUserInfoServiceMockRecorder) RoleBatchUpdate(ctx, userIds, roleUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoleBatchUpdate", reflect.TypeOf((*MockIUserInfoService)(nil).RoleBatchUpdate), ctx, userIds, roleUUID)
}

// UpdateLoginTime mocks base method.
func (m *MockIUserInfoService) UpdateLoginTime(ctx context.Context, userId int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateLoginTime", ctx, userId)
}

// UpdateLoginTime indicates an expected call of UpdateLoginTime.
func (mr *MockIUserInfoServiceMockRecorder) UpdateLoginTime(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginTime", reflect.TypeOf((*MockIUserInfoService)(nil).UpdateLoginTime), ctx, userId)
}

// UpdateMyPassword mocks base method.
func (m *MockIUserInfoService) UpdateMyPassword(ctx context.Context, userId int, req *dto.UpdateMyPasswordReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyPassword", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMyPassword indicates an expected call of UpdateMyPassword.
func (mr *MockIUserInfoServiceMockRecorder) UpdateMyPassword(ctx, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyPassword", reflect.TypeOf((*MockIUserInfoService)(nil).UpdateMyPassword), ctx, userId, req)
}

// UpdateMyProfile mocks base method.
func (m *MockIUserInfoService) UpdateMyProfile(ctx context.Context, userId int, req *dto.UpdateMyProfileReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMyProfile", ctx, userId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMyProfile indicates an expected call of UpdateMyProfile.
func (mr *MockIUserInfoServiceMockRecorder) UpdateMyProfile(ctx, userId, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMyProfile", reflect.TypeOf((*MockIUserInfoService)(nil).UpdateMyProfile), ctx, userId, req)
}

// UpdateRole mocks base method.
func (m *MockIUserInfoService) UpdateRole(ctx context.Context, userID int, roleUUID string, input *dto.ProxyRoleInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRole", ctx, userID, roleUUID, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRole indicates an expected call of UpdateRole.
func (mr *MockIUserInfoServiceMockRecorder) UpdateRole(ctx, userID, roleUUID, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRole", reflect.TypeOf((*MockIUserInfoService)(nil).UpdateRole), ctx, userID, roleUUID, input)
}

// UpdateUser mocks base method.
func (m *MockIUserInfoService) UpdateUser(ctx context.Context, operator, userId int, userInfo *dto.SaveUserReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, operator, userId, userInfo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserInfoServiceMockRecorder) UpdateUser(ctx, operator, userId, userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserInfoService)(nil).UpdateUser), ctx, operator, userId, userInfo)
}
