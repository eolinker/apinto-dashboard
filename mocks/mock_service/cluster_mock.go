// Code generated by MockGen. DO NOT EDIT.
// Source: service/cluster.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	dto "github.com/eolinker/apinto-dashboard/dto/cluster-dto"
	reflect "reflect"

	model "github.com/eolinker/apinto-dashboard/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIClusterService is a mock of IClusterService interface.
type MockIClusterService struct {
	ctrl     *gomock.Controller
	recorder *MockIClusterServiceMockRecorder
}

// MockIClusterServiceMockRecorder is the mock recorder for MockIClusterService.
type MockIClusterServiceMockRecorder struct {
	mock *MockIClusterService
}

// NewMockIClusterService creates a new mock instance.
func NewMockIClusterService(ctrl *gomock.Controller) *MockIClusterService {
	mock := &MockIClusterService{ctrl: ctrl}
	mock.recorder = &MockIClusterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClusterService) EXPECT() *MockIClusterServiceMockRecorder {
	return m.recorder
}

// CheckByNamespaceByName mocks base method.
func (m *MockIClusterService) CheckByNamespaceByName(ctx context.Context, namespaceId int, name string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckByNamespaceByName", ctx, namespaceId, name)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckByNamespaceByName indicates an expected call of CheckByNamespaceByName.
func (mr *MockIClusterServiceMockRecorder) CheckByNamespaceByName(ctx, namespaceId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckByNamespaceByName", reflect.TypeOf((*MockIClusterService)(nil).CheckByNamespaceByName), ctx, namespaceId, name)
}

// DeleteByNamespaceIdByName mocks base method.
func (m *MockIClusterService) DeleteByNamespaceIdByName(ctx context.Context, namespaceId, userId int, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByNamespaceIdByName", ctx, namespaceId, userId, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByNamespaceIdByName indicates an expected call of DeleteByNamespaceIdByName.
func (mr *MockIClusterServiceMockRecorder) DeleteByNamespaceIdByName(ctx, namespaceId, userId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByNamespaceIdByName", reflect.TypeOf((*MockIClusterService)(nil).DeleteByNamespaceIdByName), ctx, namespaceId, userId, name)
}

// GetAllCluster mocks base method.
func (m *MockIClusterService) GetAllCluster(ctx context.Context) ([]*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllCluster", ctx)
	ret0, _ := ret[0].([]*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllCluster indicates an expected call of GetAllCluster.
func (mr *MockIClusterServiceMockRecorder) GetAllCluster(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllCluster", reflect.TypeOf((*MockIClusterService)(nil).GetAllCluster), ctx)
}

// GetByClusterId mocks base method.
func (m *MockIClusterService) GetByClusterId(ctx context.Context, clusterId int) (*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByClusterId", ctx, clusterId)
	ret0, _ := ret[0].(*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByClusterId indicates an expected call of GetByClusterId.
func (mr *MockIClusterServiceMockRecorder) GetByClusterId(ctx, clusterId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByClusterId", reflect.TypeOf((*MockIClusterService)(nil).GetByClusterId), ctx, clusterId)
}

// GetByNames mocks base method.
func (m *MockIClusterService) GetByNames(ctx context.Context, namespaceId int, names []string) ([]*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNames", ctx, namespaceId, names)
	ret0, _ := ret[0].([]*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNames indicates an expected call of GetByNames.
func (mr *MockIClusterServiceMockRecorder) GetByNames(ctx, namespaceId, names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNames", reflect.TypeOf((*MockIClusterService)(nil).GetByNames), ctx, namespaceId, names)
}

// GetByNamespaceByName mocks base method.
func (m *MockIClusterService) GetByNamespaceByName(ctx context.Context, namespaceId int, name string) (*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNamespaceByName", ctx, namespaceId, name)
	ret0, _ := ret[0].(*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNamespaceByName indicates an expected call of GetByNamespaceByName.
func (mr *MockIClusterServiceMockRecorder) GetByNamespaceByName(ctx, namespaceId, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNamespaceByName", reflect.TypeOf((*MockIClusterService)(nil).GetByNamespaceByName), ctx, namespaceId, name)
}

// GetByNamespaceId mocks base method.
func (m *MockIClusterService) GetByNamespaceId(ctx context.Context, namespaceId int) ([]*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByNamespaceId", ctx, namespaceId)
	ret0, _ := ret[0].([]*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByNamespaceId indicates an expected call of GetByNamespaceId.
func (mr *MockIClusterServiceMockRecorder) GetByNamespaceId(ctx, namespaceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByNamespaceId", reflect.TypeOf((*MockIClusterService)(nil).GetByNamespaceId), ctx, namespaceId)
}

// Insert mocks base method.
func (m *MockIClusterService) Insert(ctx context.Context, namespaceId, userId int, clusterInput *dto.ClusterInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, namespaceId, userId, clusterInput)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockIClusterServiceMockRecorder) Insert(ctx, namespaceId, userId, clusterInput interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockIClusterService)(nil).Insert), ctx, namespaceId, userId, clusterInput)
}

// QueryByNamespaceId mocks base method.
func (m *MockIClusterService) QueryByNamespaceId(ctx context.Context, namespaceId int, clusterName string) (*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryByNamespaceId", ctx, namespaceId, clusterName)
	ret0, _ := ret[0].(*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryByNamespaceId indicates an expected call of QueryByNamespaceId.
func (mr *MockIClusterServiceMockRecorder) QueryByNamespaceId(ctx, namespaceId, clusterName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryByNamespaceId", reflect.TypeOf((*MockIClusterService)(nil).QueryByNamespaceId), ctx, namespaceId, clusterName)
}

// QueryListByNamespaceId mocks base method.
func (m *MockIClusterService) QueryListByNamespaceId(ctx context.Context, namespaceId int) ([]*model.Cluster, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryListByNamespaceId", ctx, namespaceId)
	ret0, _ := ret[0].([]*model.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryListByNamespaceId indicates an expected call of QueryListByNamespaceId.
func (mr *MockIClusterServiceMockRecorder) QueryListByNamespaceId(ctx, namespaceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryListByNamespaceId", reflect.TypeOf((*MockIClusterService)(nil).QueryListByNamespaceId), ctx, namespaceId)
}

// UpdateAddr mocks base method.
func (m *MockIClusterService) UpdateAddr(ctx context.Context, userId, clusterId int, addr, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddr", ctx, userId, clusterId, addr, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddr indicates an expected call of UpdateAddr.
func (mr *MockIClusterServiceMockRecorder) UpdateAddr(ctx, userId, clusterId, addr, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddr", reflect.TypeOf((*MockIClusterService)(nil).UpdateAddr), ctx, userId, clusterId, addr, uuid)
}

// UpdateDesc mocks base method.
func (m *MockIClusterService) UpdateDesc(ctx context.Context, namespaceId, userId int, name, desc string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDesc", ctx, namespaceId, userId, name, desc)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDesc indicates an expected call of UpdateDesc.
func (mr *MockIClusterServiceMockRecorder) UpdateDesc(ctx, namespaceId, userId, name, desc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDesc", reflect.TypeOf((*MockIClusterService)(nil).UpdateDesc), ctx, namespaceId, userId, name, desc)
}
