// Code generated by MockGen. DO NOT EDIT.
// Source: service/monitor.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	dto "github.com/eolinker/apinto-dashboard/dto/monitor-dto"
	model "github.com/eolinker/apinto-dashboard/modules/monitor/monitor-model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIMonitorService is a mock of IMonitorService interface.
type MockIMonitorService struct {
	ctrl     *gomock.Controller
	recorder *MockIMonitorServiceMockRecorder
}

// MockIMonitorServiceMockRecorder is the mock recorder for MockIMonitorService.
type MockIMonitorServiceMockRecorder struct {
	mock *MockIMonitorService
}

// NewMockIMonitorService creates a new mock instance.
func NewMockIMonitorService(ctrl *gomock.Controller) *MockIMonitorService {
	mock := &MockIMonitorService{ctrl: ctrl}
	mock.recorder = &MockIMonitorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMonitorService) EXPECT() *MockIMonitorServiceMockRecorder {
	return m.recorder
}

// CheckInput mocks base method.
func (m *MockIMonitorService) CheckInput(sourceType string, input []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInput", sourceType, input)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckInput indicates an expected call of CheckInput.
func (mr *MockIMonitorServiceMockRecorder) CheckInput(sourceType, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInput", reflect.TypeOf((*MockIMonitorService)(nil).CheckInput), sourceType, input)
}

// CreatePartition mocks base method.
func (m *MockIMonitorService) CreatePartition(ctx context.Context, namespaceId, userId int, input *dto.MonitorPartitionInfoProxy) (*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePartition", ctx, namespaceId, userId, input)
	ret0, _ := ret[0].(*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePartition indicates an expected call of CreatePartition.
func (mr *MockIMonitorServiceMockRecorder) CreatePartition(ctx, namespaceId, userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePartition", reflect.TypeOf((*MockIMonitorService)(nil).CreatePartition), ctx, namespaceId, userId, input)
}

// DelPartition mocks base method.
func (m *MockIMonitorService) DelPartition(ctx context.Context, namespaceId int, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelPartition", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelPartition indicates an expected call of DelPartition.
func (mr *MockIMonitorServiceMockRecorder) DelPartition(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelPartition", reflect.TypeOf((*MockIMonitorService)(nil).DelPartition), ctx, namespaceId, uuid)
}

// GetInfluxDbConfig mocks base method.
func (m *MockIMonitorService) GetInfluxDbConfig(ctx context.Context, namespaceId int, uuid string) (*model.MonitorInfluxV2Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfluxDbConfig", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(*model.MonitorInfluxV2Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfluxDbConfig indicates an expected call of GetInfluxDbConfig.
func (mr *MockIMonitorServiceMockRecorder) GetInfluxDbConfig(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfluxDbConfig", reflect.TypeOf((*MockIMonitorService)(nil).GetInfluxDbConfig), ctx, namespaceId, uuid)
}

// PartitionById mocks base method.
func (m *MockIMonitorService) PartitionById(ctx context.Context, id int) (*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionById", ctx, id)
	ret0, _ := ret[0].(*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionById indicates an expected call of PartitionById.
func (mr *MockIMonitorServiceMockRecorder) PartitionById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionById", reflect.TypeOf((*MockIMonitorService)(nil).PartitionById), ctx, id)
}

// PartitionInfo mocks base method.
func (m *MockIMonitorService) PartitionInfo(ctx context.Context, namespaceId int, uuid string) (*model.MonPartitionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionInfo", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(*model.MonPartitionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionInfo indicates an expected call of PartitionInfo.
func (mr *MockIMonitorServiceMockRecorder) PartitionInfo(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionInfo", reflect.TypeOf((*MockIMonitorService)(nil).PartitionInfo), ctx, namespaceId, uuid)
}

// PartitionList mocks base method.
func (m *MockIMonitorService) PartitionList(ctx context.Context, namespaceId int) ([]*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PartitionList", ctx, namespaceId)
	ret0, _ := ret[0].([]*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PartitionList indicates an expected call of PartitionList.
func (mr *MockIMonitorServiceMockRecorder) PartitionList(ctx, namespaceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PartitionList", reflect.TypeOf((*MockIMonitorService)(nil).PartitionList), ctx, namespaceId)
}

// UpdatePartition mocks base method.
func (m *MockIMonitorService) UpdatePartition(ctx context.Context, namespaceId, userId int, uuid string, input *dto.MonitorPartitionInfoProxy) (*model.MonPartitionListItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePartition", ctx, namespaceId, userId, uuid, input)
	ret0, _ := ret[0].(*model.MonPartitionListItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePartition indicates an expected call of UpdatePartition.
func (mr *MockIMonitorServiceMockRecorder) UpdatePartition(ctx, namespaceId, userId, uuid, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePartition", reflect.TypeOf((*MockIMonitorService)(nil).UpdatePartition), ctx, namespaceId, userId, uuid, input)
}
