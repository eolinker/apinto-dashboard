// Code generated by MockGen. DO NOT EDIT.
// Source: service/warn_strategy.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/eolinker/apinto-dashboard/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIWarnStrategyService is a mock of IWarnStrategyService interface.
type MockIWarnStrategyService struct {
	ctrl     *gomock.Controller
	recorder *MockIWarnStrategyServiceMockRecorder
}

// MockIWarnStrategyServiceMockRecorder is the mock recorder for MockIWarnStrategyService.
type MockIWarnStrategyServiceMockRecorder struct {
	mock *MockIWarnStrategyService
}

// NewMockIWarnStrategyService creates a new mock instance.
func NewMockIWarnStrategyService(ctrl *gomock.Controller) *MockIWarnStrategyService {
	mock := &MockIWarnStrategyService{ctrl: ctrl}
	mock.recorder = &MockIWarnStrategyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIWarnStrategyService) EXPECT() *MockIWarnStrategyServiceMockRecorder {
	return m.recorder
}

// CreateWarnStrategy mocks base method.
func (m *MockIWarnStrategyService) CreateWarnStrategy(ctx context.Context, namespaceId, userId int, input *model.WarnStrategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWarnStrategy", ctx, namespaceId, userId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWarnStrategy indicates an expected call of CreateWarnStrategy.
func (mr *MockIWarnStrategyServiceMockRecorder) CreateWarnStrategy(ctx, namespaceId, userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWarnStrategy", reflect.TypeOf((*MockIWarnStrategyService)(nil).CreateWarnStrategy), ctx, namespaceId, userId, input)
}

// DeleteWarnStrategy mocks base method.
func (m *MockIWarnStrategyService) DeleteWarnStrategy(ctx context.Context, uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarnStrategy", ctx, uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarnStrategy indicates an expected call of DeleteWarnStrategy.
func (mr *MockIWarnStrategyServiceMockRecorder) DeleteWarnStrategy(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarnStrategy", reflect.TypeOf((*MockIWarnStrategyService)(nil).DeleteWarnStrategy), ctx, uuid)
}

// DeleteWarnStrategyByPartitionId mocks base method.
func (m *MockIWarnStrategyService) DeleteWarnStrategyByPartitionId(ctx context.Context, namespaceId, partitionId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarnStrategyByPartitionId", ctx, namespaceId, partitionId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarnStrategyByPartitionId indicates an expected call of DeleteWarnStrategyByPartitionId.
func (mr *MockIWarnStrategyServiceMockRecorder) DeleteWarnStrategyByPartitionId(ctx, namespaceId, partitionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarnStrategyByPartitionId", reflect.TypeOf((*MockIWarnStrategyService)(nil).DeleteWarnStrategyByPartitionId), ctx, namespaceId, partitionId)
}

// UpdateWarnStrategy mocks base method.
func (m *MockIWarnStrategyService) UpdateWarnStrategy(ctx context.Context, namespaceId, userId int, input *model.WarnStrategy) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarnStrategy", ctx, namespaceId, userId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarnStrategy indicates an expected call of UpdateWarnStrategy.
func (mr *MockIWarnStrategyServiceMockRecorder) UpdateWarnStrategy(ctx, namespaceId, userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarnStrategy", reflect.TypeOf((*MockIWarnStrategyService)(nil).UpdateWarnStrategy), ctx, namespaceId, userId, input)
}

// UpdateWarnStrategyStatus mocks base method.
func (m *MockIWarnStrategyService) UpdateWarnStrategyStatus(ctx context.Context, uuid string, isEnable bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarnStrategyStatus", ctx, uuid, isEnable)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarnStrategyStatus indicates an expected call of UpdateWarnStrategyStatus.
func (mr *MockIWarnStrategyServiceMockRecorder) UpdateWarnStrategyStatus(ctx, uuid, isEnable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarnStrategyStatus", reflect.TypeOf((*MockIWarnStrategyService)(nil).UpdateWarnStrategyStatus), ctx, uuid, isEnable)
}

// WarnStrategyAll mocks base method.
func (m *MockIWarnStrategyService) WarnStrategyAll(ctx context.Context, namespaceId, status int) ([]*model.WarnStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnStrategyAll", ctx, namespaceId, status)
	ret0, _ := ret[0].([]*model.WarnStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WarnStrategyAll indicates an expected call of WarnStrategyAll.
func (mr *MockIWarnStrategyServiceMockRecorder) WarnStrategyAll(ctx, namespaceId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnStrategyAll", reflect.TypeOf((*MockIWarnStrategyService)(nil).WarnStrategyAll), ctx, namespaceId, status)
}

// WarnStrategyByUuid mocks base method.
func (m *MockIWarnStrategyService) WarnStrategyByUuid(ctx context.Context, namespaceId int, uuid string) (*model.WarnStrategy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnStrategyByUuid", ctx, namespaceId, uuid)
	ret0, _ := ret[0].(*model.WarnStrategy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WarnStrategyByUuid indicates an expected call of WarnStrategyByUuid.
func (mr *MockIWarnStrategyServiceMockRecorder) WarnStrategyByUuid(ctx, namespaceId, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnStrategyByUuid", reflect.TypeOf((*MockIWarnStrategyService)(nil).WarnStrategyByUuid), ctx, namespaceId, uuid)
}

// WarnStrategyListPage mocks base method.
func (m *MockIWarnStrategyService) WarnStrategyListPage(ctx context.Context, namespaceId int, query *model.QueryWarnStrategyParam) ([]*model.WarnStrategy, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WarnStrategyListPage", ctx, namespaceId, query)
	ret0, _ := ret[0].([]*model.WarnStrategy)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WarnStrategyListPage indicates an expected call of WarnStrategyListPage.
func (mr *MockIWarnStrategyServiceMockRecorder) WarnStrategyListPage(ctx, namespaceId, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnStrategyListPage", reflect.TypeOf((*MockIWarnStrategyService)(nil).WarnStrategyListPage), ctx, namespaceId, query)
}
