// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: infos.proto

package grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetConsoleInfo_GetAllNamespaces_FullMethodName      = "/GetConsoleInfo/GetAllNamespaces"
	GetConsoleInfo_GetApis_FullMethodName               = "/GetConsoleInfo/GetApis"
	GetConsoleInfo_GetApisByServices_FullMethodName     = "/GetConsoleInfo/GetApisByServices"
	GetConsoleInfo_GetApisByUUIDs_FullMethodName        = "/GetConsoleInfo/GetApisByUUIDs"
	GetConsoleInfo_GetAllServices_FullMethodName        = "/GetConsoleInfo/GetAllServices"
	GetConsoleInfo_GetAllServicesByNames_FullMethodName = "/GetConsoleInfo/GetAllServicesByNames"
	GetConsoleInfo_GetAllApps_FullMethodName            = "/GetConsoleInfo/GetAllApps"
	GetConsoleInfo_GetAppsByUuids_FullMethodName        = "/GetConsoleInfo/GetAppsByUuids"
	GetConsoleInfo_GetNavigationModules_FullMethodName  = "/GetConsoleInfo/GetNavigationModules"
	GetConsoleInfo_GetClusters_FullMethodName           = "/GetConsoleInfo/GetClusters"
	GetConsoleInfo_GetClustersByNames_FullMethodName    = "/GetConsoleInfo/GetClustersByNames"
	GetConsoleInfo_GetClustersByUUIDs_FullMethodName    = "/GetConsoleInfo/GetClustersByUUIDs"
	GetConsoleInfo_SaveUserInfo_FullMethodName          = "/GetConsoleInfo/SaveUserInfo"
)

// GetConsoleInfoClient is the client API for GetConsoleInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetConsoleInfoClient interface {
	GetAllNamespaces(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NamespacesListResp, error)
	GetApis(ctx context.Context, in *GetApisReq, opts ...grpc.CallOption) (*ApisResp, error)
	GetApisByServices(ctx context.Context, in *GetApisByServicesReq, opts ...grpc.CallOption) (*ApisResp, error)
	GetApisByUUIDs(ctx context.Context, in *GetApisByUUIDsReq, opts ...grpc.CallOption) (*ApisResp, error)
	GetAllServices(ctx context.Context, in *GetServicesReq, opts ...grpc.CallOption) (*ServicesResp, error)
	GetAllServicesByNames(ctx context.Context, in *GetServicesByNamesReq, opts ...grpc.CallOption) (*ServicesResp, error)
	GetAllApps(ctx context.Context, in *GetAppsReq, opts ...grpc.CallOption) (*AppsResp, error)
	GetAppsByUuids(ctx context.Context, in *GetAppsByUuidsReq, opts ...grpc.CallOption) (*AppsResp, error)
	GetNavigationModules(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NavigationModulesResp, error)
	GetClusters(ctx context.Context, in *GetClustersReq, opts ...grpc.CallOption) (*ClusterInfoResp, error)
	GetClustersByNames(ctx context.Context, in *GetClustersReq, opts ...grpc.CallOption) (*ClusterInfoResp, error)
	GetClustersByUUIDs(ctx context.Context, in *GetClustersReq, opts ...grpc.CallOption) (*ClusterInfoResp, error)
	SaveUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
}

type getConsoleInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewGetConsoleInfoClient(cc grpc.ClientConnInterface) GetConsoleInfoClient {
	return &getConsoleInfoClient{cc}
}

func (c *getConsoleInfoClient) GetAllNamespaces(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NamespacesListResp, error) {
	out := new(NamespacesListResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetAllNamespaces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetApis(ctx context.Context, in *GetApisReq, opts ...grpc.CallOption) (*ApisResp, error) {
	out := new(ApisResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetApis_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetApisByServices(ctx context.Context, in *GetApisByServicesReq, opts ...grpc.CallOption) (*ApisResp, error) {
	out := new(ApisResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetApisByServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetApisByUUIDs(ctx context.Context, in *GetApisByUUIDsReq, opts ...grpc.CallOption) (*ApisResp, error) {
	out := new(ApisResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetApisByUUIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetAllServices(ctx context.Context, in *GetServicesReq, opts ...grpc.CallOption) (*ServicesResp, error) {
	out := new(ServicesResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetAllServices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetAllServicesByNames(ctx context.Context, in *GetServicesByNamesReq, opts ...grpc.CallOption) (*ServicesResp, error) {
	out := new(ServicesResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetAllServicesByNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetAllApps(ctx context.Context, in *GetAppsReq, opts ...grpc.CallOption) (*AppsResp, error) {
	out := new(AppsResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetAllApps_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetAppsByUuids(ctx context.Context, in *GetAppsByUuidsReq, opts ...grpc.CallOption) (*AppsResp, error) {
	out := new(AppsResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetAppsByUuids_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetNavigationModules(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*NavigationModulesResp, error) {
	out := new(NavigationModulesResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetNavigationModules_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetClusters(ctx context.Context, in *GetClustersReq, opts ...grpc.CallOption) (*ClusterInfoResp, error) {
	out := new(ClusterInfoResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetClusters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetClustersByNames(ctx context.Context, in *GetClustersReq, opts ...grpc.CallOption) (*ClusterInfoResp, error) {
	out := new(ClusterInfoResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetClustersByNames_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) GetClustersByUUIDs(ctx context.Context, in *GetClustersReq, opts ...grpc.CallOption) (*ClusterInfoResp, error) {
	out := new(ClusterInfoResp)
	err := c.cc.Invoke(ctx, GetConsoleInfo_GetClustersByUUIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getConsoleInfoClient) SaveUserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	out := new(UserInfoResponse)
	err := c.cc.Invoke(ctx, GetConsoleInfo_SaveUserInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetConsoleInfoServer is the server API for GetConsoleInfo service.
// All implementations must embed UnimplementedGetConsoleInfoServer
// for forward compatibility
type GetConsoleInfoServer interface {
	GetAllNamespaces(context.Context, *EmptyRequest) (*NamespacesListResp, error)
	GetApis(context.Context, *GetApisReq) (*ApisResp, error)
	GetApisByServices(context.Context, *GetApisByServicesReq) (*ApisResp, error)
	GetApisByUUIDs(context.Context, *GetApisByUUIDsReq) (*ApisResp, error)
	GetAllServices(context.Context, *GetServicesReq) (*ServicesResp, error)
	GetAllServicesByNames(context.Context, *GetServicesByNamesReq) (*ServicesResp, error)
	GetAllApps(context.Context, *GetAppsReq) (*AppsResp, error)
	GetAppsByUuids(context.Context, *GetAppsByUuidsReq) (*AppsResp, error)
	GetNavigationModules(context.Context, *EmptyRequest) (*NavigationModulesResp, error)
	GetClusters(context.Context, *GetClustersReq) (*ClusterInfoResp, error)
	GetClustersByNames(context.Context, *GetClustersReq) (*ClusterInfoResp, error)
	GetClustersByUUIDs(context.Context, *GetClustersReq) (*ClusterInfoResp, error)
	SaveUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error)
	mustEmbedUnimplementedGetConsoleInfoServer()
}

// UnimplementedGetConsoleInfoServer must be embedded to have forward compatible implementations.
type UnimplementedGetConsoleInfoServer struct {
}

func (UnimplementedGetConsoleInfoServer) GetAllNamespaces(context.Context, *EmptyRequest) (*NamespacesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllNamespaces not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetApis(context.Context, *GetApisReq) (*ApisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApis not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetApisByServices(context.Context, *GetApisByServicesReq) (*ApisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApisByServices not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetApisByUUIDs(context.Context, *GetApisByUUIDsReq) (*ApisResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApisByUUIDs not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetAllServices(context.Context, *GetServicesReq) (*ServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServices not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetAllServicesByNames(context.Context, *GetServicesByNamesReq) (*ServicesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllServicesByNames not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetAllApps(context.Context, *GetAppsReq) (*AppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllApps not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetAppsByUuids(context.Context, *GetAppsByUuidsReq) (*AppsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppsByUuids not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetNavigationModules(context.Context, *EmptyRequest) (*NavigationModulesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNavigationModules not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetClusters(context.Context, *GetClustersReq) (*ClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusters not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetClustersByNames(context.Context, *GetClustersReq) (*ClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClustersByNames not implemented")
}
func (UnimplementedGetConsoleInfoServer) GetClustersByUUIDs(context.Context, *GetClustersReq) (*ClusterInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClustersByUUIDs not implemented")
}
func (UnimplementedGetConsoleInfoServer) SaveUserInfo(context.Context, *UserInfoRequest) (*UserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveUserInfo not implemented")
}
func (UnimplementedGetConsoleInfoServer) mustEmbedUnimplementedGetConsoleInfoServer() {}

// UnsafeGetConsoleInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetConsoleInfoServer will
// result in compilation errors.
type UnsafeGetConsoleInfoServer interface {
	mustEmbedUnimplementedGetConsoleInfoServer()
}

func RegisterGetConsoleInfoServer(s grpc.ServiceRegistrar, srv GetConsoleInfoServer) {
	s.RegisterService(&GetConsoleInfo_ServiceDesc, srv)
}

func _GetConsoleInfo_GetAllNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetAllNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetAllNamespaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetAllNamespaces(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApisReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetApis_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetApis(ctx, req.(*GetApisReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetApisByServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApisByServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetApisByServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetApisByServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetApisByServices(ctx, req.(*GetApisByServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetApisByUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApisByUUIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetApisByUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetApisByUUIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetApisByUUIDs(ctx, req.(*GetApisByUUIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetAllServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetAllServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetAllServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetAllServices(ctx, req.(*GetServicesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetAllServicesByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesByNamesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetAllServicesByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetAllServicesByNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetAllServicesByNames(ctx, req.(*GetServicesByNamesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetAllApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetAllApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetAllApps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetAllApps(ctx, req.(*GetAppsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetAppsByUuids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAppsByUuidsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetAppsByUuids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetAppsByUuids_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetAppsByUuids(ctx, req.(*GetAppsByUuidsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetNavigationModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetNavigationModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetNavigationModules_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetNavigationModules(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetClusters(ctx, req.(*GetClustersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetClustersByNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetClustersByNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetClustersByNames_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetClustersByNames(ctx, req.(*GetClustersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_GetClustersByUUIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClustersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).GetClustersByUUIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_GetClustersByUUIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).GetClustersByUUIDs(ctx, req.(*GetClustersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetConsoleInfo_SaveUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetConsoleInfoServer).SaveUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetConsoleInfo_SaveUserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetConsoleInfoServer).SaveUserInfo(ctx, req.(*UserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetConsoleInfo_ServiceDesc is the grpc.ServiceDesc for GetConsoleInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetConsoleInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetConsoleInfo",
	HandlerType: (*GetConsoleInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllNamespaces",
			Handler:    _GetConsoleInfo_GetAllNamespaces_Handler,
		},
		{
			MethodName: "GetApis",
			Handler:    _GetConsoleInfo_GetApis_Handler,
		},
		{
			MethodName: "GetApisByServices",
			Handler:    _GetConsoleInfo_GetApisByServices_Handler,
		},
		{
			MethodName: "GetApisByUUIDs",
			Handler:    _GetConsoleInfo_GetApisByUUIDs_Handler,
		},
		{
			MethodName: "GetAllServices",
			Handler:    _GetConsoleInfo_GetAllServices_Handler,
		},
		{
			MethodName: "GetAllServicesByNames",
			Handler:    _GetConsoleInfo_GetAllServicesByNames_Handler,
		},
		{
			MethodName: "GetAllApps",
			Handler:    _GetConsoleInfo_GetAllApps_Handler,
		},
		{
			MethodName: "GetAppsByUuids",
			Handler:    _GetConsoleInfo_GetAppsByUuids_Handler,
		},
		{
			MethodName: "GetNavigationModules",
			Handler:    _GetConsoleInfo_GetNavigationModules_Handler,
		},
		{
			MethodName: "GetClusters",
			Handler:    _GetConsoleInfo_GetClusters_Handler,
		},
		{
			MethodName: "GetClustersByNames",
			Handler:    _GetConsoleInfo_GetClustersByNames_Handler,
		},
		{
			MethodName: "GetClustersByUUIDs",
			Handler:    _GetConsoleInfo_GetClustersByUUIDs_Handler,
		},
		{
			MethodName: "SaveUserInfo",
			Handler:    _GetConsoleInfo_SaveUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "infos.proto",
}
