// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: api.proto

package grpc_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApiService_CreateFromTemplate_FullMethodName = "/ApiService/CreateFromTemplate"
	ApiService_ForeachInfo_FullMethodName        = "/ApiService/ForeachInfo"
)

// ApiServiceClient is the client API for ApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiServiceClient interface {
	CreateFromTemplate(ctx context.Context, opts ...grpc.CallOption) (ApiService_CreateFromTemplateClient, error)
	ForeachInfo(ctx context.Context, in *ApiSearchRequest, opts ...grpc.CallOption) (ApiService_ForeachInfoClient, error)
}

type apiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiServiceClient(cc grpc.ClientConnInterface) ApiServiceClient {
	return &apiServiceClient{cc}
}

func (c *apiServiceClient) CreateFromTemplate(ctx context.Context, opts ...grpc.CallOption) (ApiService_CreateFromTemplateClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[0], ApiService_CreateFromTemplate_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceCreateFromTemplateClient{stream}
	return x, nil
}

type ApiService_CreateFromTemplateClient interface {
	Send(*ApiCreateByTemplateRequest) error
	Recv() (*ApiCreateResponse, error)
	grpc.ClientStream
}

type apiServiceCreateFromTemplateClient struct {
	grpc.ClientStream
}

func (x *apiServiceCreateFromTemplateClient) Send(m *ApiCreateByTemplateRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiServiceCreateFromTemplateClient) Recv() (*ApiCreateResponse, error) {
	m := new(ApiCreateResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *apiServiceClient) ForeachInfo(ctx context.Context, in *ApiSearchRequest, opts ...grpc.CallOption) (ApiService_ForeachInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApiService_ServiceDesc.Streams[1], ApiService_ForeachInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &apiServiceForeachInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ApiService_ForeachInfoClient interface {
	Recv() (*ApiItem, error)
	grpc.ClientStream
}

type apiServiceForeachInfoClient struct {
	grpc.ClientStream
}

func (x *apiServiceForeachInfoClient) Recv() (*ApiItem, error) {
	m := new(ApiItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServiceServer is the server API for ApiService service.
// All implementations must embed UnimplementedApiServiceServer
// for forward compatibility
type ApiServiceServer interface {
	CreateFromTemplate(ApiService_CreateFromTemplateServer) error
	ForeachInfo(*ApiSearchRequest, ApiService_ForeachInfoServer) error
	mustEmbedUnimplementedApiServiceServer()
}

// UnimplementedApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiServiceServer struct {
}

func (UnimplementedApiServiceServer) CreateFromTemplate(ApiService_CreateFromTemplateServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateFromTemplate not implemented")
}
func (UnimplementedApiServiceServer) ForeachInfo(*ApiSearchRequest, ApiService_ForeachInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ForeachInfo not implemented")
}
func (UnimplementedApiServiceServer) mustEmbedUnimplementedApiServiceServer() {}

// UnsafeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServiceServer will
// result in compilation errors.
type UnsafeApiServiceServer interface {
	mustEmbedUnimplementedApiServiceServer()
}

func RegisterApiServiceServer(s grpc.ServiceRegistrar, srv ApiServiceServer) {
	s.RegisterService(&ApiService_ServiceDesc, srv)
}

func _ApiService_CreateFromTemplate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServiceServer).CreateFromTemplate(&apiServiceCreateFromTemplateServer{stream})
}

type ApiService_CreateFromTemplateServer interface {
	Send(*ApiCreateResponse) error
	Recv() (*ApiCreateByTemplateRequest, error)
	grpc.ServerStream
}

type apiServiceCreateFromTemplateServer struct {
	grpc.ServerStream
}

func (x *apiServiceCreateFromTemplateServer) Send(m *ApiCreateResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiServiceCreateFromTemplateServer) Recv() (*ApiCreateByTemplateRequest, error) {
	m := new(ApiCreateByTemplateRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApiService_ForeachInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ApiSearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ApiServiceServer).ForeachInfo(m, &apiServiceForeachInfoServer{stream})
}

type ApiService_ForeachInfoServer interface {
	Send(*ApiItem) error
	grpc.ServerStream
}

type apiServiceForeachInfoServer struct {
	grpc.ServerStream
}

func (x *apiServiceForeachInfoServer) Send(m *ApiItem) error {
	return x.ServerStream.SendMsg(m)
}

// ApiService_ServiceDesc is the grpc.ServiceDesc for ApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiService",
	HandlerType: (*ApiServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateFromTemplate",
			Handler:       _ApiService_CreateFromTemplate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ForeachInfo",
			Handler:       _ApiService_ForeachInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
